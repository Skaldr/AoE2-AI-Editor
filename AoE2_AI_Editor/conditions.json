{"true": "true\nThis fact is always true. It is used for testing purposes.", "false": "false\n This fact is always false. It is used for testing purposes.", "attack-soldier-count": "attack-soldier-count  <rel-op>  <value>\nThe fact checks the computer player\u2019s attack soldier count. An attack soldier is a land-based military unit currently assigned to attack groups.", "attack-warboat-count": "attack-warboat-count  <rel-op>  <value>\nThe fact checks the computer player\u2019s attack warboat count. An attack warboat is a boat capable of attacking and currently assigned to attack groups.", "building-available": "building-available  <building>\nThe fact checks that the building is available to the computer player's civ, and that the tech treeprerequisites are met.The fact does not check that there are enough resources to build the building.The fact allows the use of building line wildcard parameters for the <building>.", "building-count": "building-count  <rel-op>  <value>\nThis fact checks the computer player's building count. Only existing buildings are included.", "building-count-total": "building-count-total  <rel-op>  <value>\nThis fact checks the computer player's total building count. The total includes existing and queued buildings.", "building-type-count": "building-type-count  <building> <rel-op>  <value>\nThis fact checks the computer player's building count. Only existing buildings of the given type are included.The fact allows the use of building line wildcard parameters for the <building>.", "building-type-count-total": "building-type-count-total  <building> <rel-op>  <value>\nThis fact checks the computer player's total building count. The total includes existing and queued buildings of the given type.The fact allows the use of building line wildcard parameters for the <building>.", "can-afford-building": "can-afford-building <building>\nThis fact checks whether the computer player has enough resources to build the given building.The fact does not take into account escrowed resources.The fact allows the use of building line wildcard parameters for the <building>.", "can-afford-complete-wall": "can-afford-complete-wall <perimeter> <wall-type>\nThis fact checks whether the computer player has enough resources to finish the given wall at the given perimeter. The fact does not take into account escrowed resources.In particular it checks:That the wall type is available to the computer player\u2019s civilization.That the tech tree prerequisites for using that wall type are met.That the resources needed for completing a wall line are available, not counting escrow amounts.", "can-afford-research": "can-afford-research <research-item>\nThis fact checks whether the computer player has enough resources to perform the given research.The fact does not take into account escrowed resources.", "can-afford-unit": "can-afford-unit <unit>\nThis fact checks whether the computer player has enough resources to train given unit.The fact does not take into account escrowed resources.The fact allows the use of unit line wildcard parameters for the <unit>.", "can-build": "can-build <building>\nThis fact checks whether the computer player can build the given building. In particular it checks:That the building is available to the computer player\u2019s civilization.That the tech tree prerequisites for building are met.That the resources needed for the building are available, not counting escrow amounts. The fact allows the use of building line wildcard parameters for the <building>.", "can-build-gate": "can-build-gate  <perimeter>\nThis fact checks whether construction of a gate as part of the given perimeter wall can start.The fact does not take into account escrow resources.In particular it checks:That the gate is available to the computer player\u2019s civilization.That the tech tree prerequisites for building a gate are met.That the resources needed for building a gate are available, not counting escrow amounts.That there is a location to build a gate.", "can-build-gate-with-escrow": "can-build-gate-with-escrow  <perimeter>\nThis fact checks whether construction of a gate as part of the given perimeter wall can start.The fact takes into account escrow resources.In particular it checks:That the gate is available to the computer player\u2019s civilization.That the tech tree prerequisites for building a gate are met.That the resources needed for building a gate are available when using escrow amounts.That there is a location to build a gate.", "can-build-wall": "can-build-wall  <perimeter> <wall-type>\nThis fact checks whether a wall line of the given wall type can be built at the given perimeter.The fact does not take into account escrow resources.In particular it checks:That the wall type is available to the computer player\u2019s civilization.That the tech tree prerequisites for using that wall type are met.That the resources needed for building a wall line are available, not counting escrow amounts.That there is a location to build a wall line.The fact allows the use of wall line wildcard parameters for the <wall-type>.", "can-build-wall-with-escrow": "can-build-wall-with-escrow <perimeter> <wall-type>\nThis fact checks whether a wall line of the given wall type can be built at the given perimeter.The fact takes into account escrow resources.In particular it checks:That the wall type is available to the computer player\u2019s civilization.That the tech tree prerequisites for using that wall type are met.That the resources needed for building a wall line are available when using escrow amounts.That there is a location to build a wall line.The fact allows the use of wall line wildcard parameters for the <wall-type>.", "can-build-with-escrow": "can-build-with-escrow <building>\nThis fact checks whether the computer player can build the given building. In particular it checks:That the building is available to the computer player\u2019s civilization.That the tech tree prerequisites for building are met.That the resources needed for building are available when using escrow amounts.The fact allows the use of building line wildcard parameters for the <building>.", "can-buy-commodity": "can-buy-commodity <commodity>\nThis fact checks whether the computer player can buy one lot of the given commodity.The fact does not take into account escrowed resources.", "can-research<research-item>": "can-research<research-item>\nThis fact checks if the given research can start. In particular it checks:That the research item is available to the computer player's civilization.That the tech tree prerequisites for research are met.That resources needed for research are available, not counting escrow amounts.That there is a building that is not busy and is ready to start research.", "can-research-with-escrow": "can-research-with-escrow <research-item>\nThis fact checks if the given research can start. In particular it checks:That the research item is available to the computer player's civilization.That the tech tree prerequisites for research are met.That resources needed for research are available when using escrow amounts.That there is a building that is not busy and is ready to start research.", "can-sell-commodity": "can-sell-commodity <commodity>\nThis fact checks whether the computer player can sell one lot of the given commodity.The fact does not take into account escrowed resources.", "can-spy": "can-spy\nThis fact checks if the spy command can be executed.The fact takes into account escrowed resources.", "can-spy-with-escrow": "can-spy-with-escrow\nThis fact checks if spy command can be executed.The fact does not take into account escrowed resources.", "can-train": "can-train <unit>\nThis fact checks if the training of the given unit can start. In particular it checks:That the unit is available to the computer player's civilization.That the tech tree prerequisites for training the unit are met.That resources needed for training the unit are available, not counting escrow amounts.That there is enough housing headroom for the unit.That there is a building that is not busy and is ready to start training the unit.The fact allows the use of unit line wildcard parameters for the <unit>.", "can-train-with-escrow": "can-train-with-escrow <unit>\nThis fact checks if the training of the given unit can start. In particular it checks:That the unit is available to the computer player's civilization.That the tech tree prerequisites for training the unit are met.That resources needed for training the unit are available when using escrow amounts.That there is enough housing headroom for the unit.That there is a building that is not busy and is ready to start training the unit.The fact allows the use of unit line wildcard parameters for the <unit>.", "cc-players-building-count": "cc-players-building-count  <player-number>  <rel-op>  <value>\nA cheating version of players-building-count. For use in scenarios only.The fact checks the given player's building count. Both existing buildings and buildings under construction are included regardless of whether they have been seen \u2013 fog is ignored.The fact allows \u201cany\u201d/\u201devery\u201d wildcard parameters for the <player-number> and the use of building line wildcard parameters for the <building>.", "cc-players-building-type-count": "cc-players-building-type-count  <player-number>  <building> <rel-op>  <value>\nA cheating version of players-building-type-count. For use in scenarios only.This fact checks the given player's building count. Both existing buildings and buildings under construction of the given type are included regardless of whether they have been seen \u2013 fog is ignored.The fact allows \u201cany\u201d/\u201devery\u201d wildcard parameters for the <player-number> and the use of building line wildcard parameters for the <building>.", "cc-players-unit-count": "cc-players-unit-count  <player-number>  <rel-op>  <value>\nA cheating version of players-unit-count. For use in scenarios only.This fact checks the given player's unit count. Only trained units are included and fog is ignored.The fact allows \u201cany\u201d/\u201devery\u201d wildcard parameters for the <player-number>.", "cc-players-unit-type-count": "cc-players-unit-type-count  <player-number>  <unit>  <rel-op>  <value>\nA cheating version of players-unit-type-count. For use in scenarios only.This fact checks the given player's unit count. Only trained units of the given type are included and fog is ignored.The fact allows \u201cany\u201d/\u201devery\u201d wildcard parameters for the <player-number>.", "cheats-enabled": "cheats-enabled\nThis fact checks whether the cheats have been enabled.", "civ-selected": "civ-selected  <civ>\nThis fact checks the computer player\u2019s civ.", "civilian-population": "civilian-population  <rel-op>  <value>\n                                            This fact checks the computer player\u2019s civilian population. The civilian population is villagers, trade vehicles, fishing boats, etc.", "commodity-buying-price": "commodity-buying-price  <commodity>  <rel-op>  <value>\n                                                           This fact checks the current buying price for the given commodity.", "commodity-selling-price": "commodity-selling-price  <commodity>  <rel-op>  <value>\n                                                    This fact checks the current selling price for the given commodity.", "current-age": "current-age  <rel-op> <age>\nThis fact checks computer player\u2019s current age.", "current-age-time": "current-age-time  <rel-op> <value>\nThis fact checks the computer player\u2019s current age time -- time spent in the current age.", "current-score": "current-score  <rel-op> <value>\nThis fact checks the computer player\u2019s current score.", "death-match-game": "death-match-game\n                                                                         This fact checks if the game is a Death Match game.", "defend-soldier-count": "defend-soldier-count  <rel-op> <value>\nThis fact checks the computer player's defend soldier count.A defend soldier is a land-based military unit not assigned to attack groups.", "defend-warboat-count": "defend-warboat-count  <rel-op> <value>\nThis fact checks the computer player's defend warboat count.A defend warboat is a boat capable of attacking and not assigned to attack groups.", "difficulty": "difficulty  <rel-op> <difficulty>\n                                                                         This fact checks difficulty setting.", "doctrine": "doctrine <value>\n                                                                         This fact checks what the current doctrine is.", "dropsite-min-distance": "dropsite-min-distance  <resource-type> <rel-op>  <value>\nThis fact checks computer player\u2019s minimum dropsite walking distance for a given resource type. Long walking distances indicate a need for a new dropsite.It is not recommended to use this fact for building of first dropsites necessary for age advancement. If, at the beginning, the resources happen to be close enough to the Town Center, building of the first dropsites will be delayed, resulting in slower age progression.", "enemy-buildings-in-town": "enemy-buildings-in-town\n                                                                         The fact checks for enemy buildings in a computer player's town.", "enemy-captured-relics": "enemy-captured-relics\n                                                                         This fact checks if the enemy has captured all relics.When this happens, tactical AI automatically starts targeting Monasteries and Monks. Use this fact to intensify attacks and combine it with the attack-now action to force attacks.", "escrow-amount": "escrow-amount  <resource-type>  <rel-op>  <value>\n                                                                         This fact checks a computer player\u2019s escrow amount for a given resource type.", "event-detected": "event-detected  <event-type> <event-id>\n                                                                         This fact checks if the given event has been detected. The fact stays true until the event is explicitly disabled by the acknowledge-event action.", "food-amount": "food-amount <rel-op>  <value>\n                                                                         This fact checks a computer player\u2019s food amount.", "game-time": "game-time  <rel-op>  <value>\nThis fact checks the game time. The game time is given in seconds. The fact can be used to make rules time-specific. For example, the computer can become more aggressive after 15 minutes of game time.", "goal": "goal <goal-id> <value>\n                                                                         This fact checks what the given goal is.", "gold-amount": "gold-amount  <rel-op>  <value>\nThis fact checks a computer player\u2019s gold amount.", "housing-headroom": "housing-headroom  <rel-op>  <value>\nThis fact checks computer player\u2019s housing headroom. Housing headroom is the difference between current housing capacity and trained unit capacity. For example, a computer player has a Town Center (capacity 5), a House (capacity 5) and 6 villagers. In this case, housing headroom is 4.", "idle-farm-count": "idle-farm-count  <rel-op>  <value>\nThis fact checks a computer player\u2019s idle farm count \u2013 the number of farms with no farmers. It should be used before a new farm is built to make sure it is needed.", "map-size": "map-size <map-size>\n                                                                                        This fact checks map size.", "map-type": "map-type <map-type>\n                                                                                       This fact checks map type.", "military-population": "military-population  <rel-op>  <value>\n                                                           This fact checks computer player\u2019s military population.", "player-computer": "player-computer <player-number>\nThis fact checks if the given player is a computer player.The fact allows \u201cany\u201d/\u201devery\u201d wildcard parameters for the <player-number>.", "player-human": "player-human <player-number>\nThis fact checks if the given player is a human.The fact allows \u201cany\u201d/\u201devery\u201d wildcard parameters for the <player-number>.", "player-in-game": "player-in-game  <player-number>\nThis fact checks if the given player is a valid player and still playing.The fact allows \u201cany\u201d/\u201devery\u201d wildcard parameters for the <player-number>. ", "player-number": "player-number  <player-number>\nThis fact checks computer player\u2019s player number.", "player-resigned": "player-resigned <player-number>\nThis fact checks if the given player has lost by resigning. Note that a player can lose without resigning, so this fact should not be used to check whether a player has lost a game. To check whether a player has lost a game use (not (player-in-game <player-number)).The fact allows \u201cany\u201d/\u201devery\u201d wildcard parameters for the <player-number>.", "player-valid": "player-valid  <player-number>\nThis fact checks if the given player is a valid player. In games with more than 2 players, players that lost before the game is over are considered to be valid players. This is because although the player is not in the game, their units/buildings can still be in the game. To check whether the given player is still in the game use the player-in-game fact.The fact allows \u201cany\u201d/\u201devery\u201d wildcard parameters for the <player-number>.", "players-building-count": "players-building-count  <player-number>  <rel-op>  <value>\nThis fact checks the given player's building count. Both existing buildings and buildings under construction are included. The computer player relies only on what it has seen \u2013 no cheating.The fact allows \u201cany\u201d/\u201devery\u201d wildcard parameters for the <player-number> and the use of building line wildcard parameters for the <building>.", "players-building-type-count": "players-building-type-count  <player-number>  <building> <rel-op>  <value>\nThis fact checks the given player's building count. Both existing buildings and buildings under construction of the given type are included. The computer player relies only on what it has seen \u2013 no cheating.The fact allows \u201cany\u201d/\u201devery\u201d wildcard parameters for the <player-number> and the use of building line wildcard parameters for the <building>.", "players-civ": "players-civ  <player-number> <civ>\nThis fact checks the given player\u2019s civ.The fact allows \u201cany\u201d/\u201devery\u201d wildcard parameters for the <player-number>.", "players-civilian-population": "players-civilian-population  <player-number> <rel-op>  <value>\nThis fact checks a given player\u2019s civilian population.This is equivalent to a human player checking the timeline.The fact allows \u201cany\u201d/\u201devery\u201d wildcard parameters for the <player-number>.", "players-current-age": "players-current-age  <player-number> <rel-op> <age>\nThis fact checks the given player\u2019s current age.This is equivalent to a human player checking the timeline.The fact allows \u201cany\u201d/\u201devery\u201d wildcard parameters for the <player-number>.", "players-current-age-time": "players-current-age-time  <player-number> <rel-op> <value>\nThis fact checks the given player\u2019s current age time -- time spent in the current age.This is equivalent to a human player checking the timeline.The fact allows \u201cany\u201d/\u201devery\u201d wildcard parameters for the <player-number>.", "players-military-population": "players-military-population  <player-number> <rel-op>  <value>\nThis fact checks the given player\u2019s military population.This is equivalent to a human player checking the timeline.The fact allows \u201cany\u201d/\u201devery\u201d wildcard parameters for the <player-number>.", "players-population": "players-population  <player-number> <rel-op>  <value>\n                              This fact checks the given player\u2019s population.This is equivalent to a human player checking the timeline.The fact allows \u201cany\u201d/\u201devery\u201d wildcard parameters for the <player-number>.", "players-score": "players-score  <player-number> <rel-op> <score>\nThis fact checks the given player\u2019s current score.The fact allows \u201cany\u201d/\u201devery\u201d wildcard parameters for the <player-number>.", "players-stance": "players-stance  <player-number> <diplomatic-stance>\nThis fact checks the given player\u2019s diplomatic stance.The fact allows \u201cany\u201d/\u201devery\u201d wildcard parameters for the <player-number>.", "players-tribute": "players-tribute  <player-number> <resource-type> <rel-op> <value>\nThis facts checks the player's tribute given throughout the game. Only tribute for the given resource type is checked.The fact allows \u201cany\u201d/\u201devery\u201d wildcard parameters for the <player-number>.", "players-tribute-memory": "players-tribute-memory  <player-number> <resource-type> <rel-op> <value>\nThis facts checks a player's tribute given since the player's tribute memory was cleared. Only tribute memory for the given resource type is checked.The fact allows \u201cany\u201d/\u201devery\u201d wildcard parameters for the <player-number>.", "players-unit-count": "players-unit-count  <player-number>  <rel-op>  <value>\nThis fact checks the given player's unit count. The computer player relies only on what it has seen \u2013 no cheating. For allies and self only trained units are included.The fact allows \u201cany\u201d/\u201devery\u201d wildcard parameters for the <player-number>.", "players-unit-type-count": "players-unit-type-count  <player-number>  <unit>  <rel-op>  <value>\nThis fact checks the given player's unit count. The computer player relies only on what it has seen \u2013 no cheating. For allies and self only trained units of the given type are included.The fact allows \u201cany\u201d/\u201devery\u201d wildcard parameters for the <player-number>.", "population": "population  <rel-op>  <value>\n                                                                     This fact checks the computer player\u2019s population.", "population-cap": "population-cap  <rel-op>  <value>\n                                                               This fact checks population cap setting.", "population-headroom": "population-headroom  <rel-op>  <value>\nThis fact checks the computer player\u2019s population headroom. Population headroom is the difference between the game\u2019s population cap and current housing capacity. For example, in a game with a population cap of 75, the computer player has a town center (capacity 5) and a house (capacity 5). In this case population headroom is 65.", "random-number": "random-number  <rel-op>  <value>\n                                                               This fact checks random number value.", "regicide-game": "regicide-game\nThis fact checks if the game is a regicide game.", "research-available": "research-available  <research-item>\nThe fact checks that the given research is available to the computer player's civ, and that the research is available at this time (tech tree prerequisites are met). The fact does not check that there are enough resources to start researching.", "research-completed": "research-completed  <research-item>\nThis fact checks that the given research is completed.", "resource-found": "resource-found  <resource-type>\nThis fact checks whether the computer player has found the given resource.The facts should be used at the beginning of the game. Once it becomes true for a certain resource it stays true for that resource. In this context, food refers to a forage site and wood refers to forest trees (not lone trees).", "shared-goal": "shared-goal <shared-goal-id> <value>\nThis fact checks a given shared goal -- a goal that is shared among computer players. It is to be used only when all computer players are on the same team.", "sheep-and-forage-too-far": "sheep-and-forage-too-far\nThis fact checks whether the computer player has any forage site(s) and/or sheep within 8 tiles of the drop-off location (Mill or Town Center).", "soldier-count": "soldier-count  <rel-op>  <value>\nThis fact checks the computer player\u2019s soldier count. An attack soldier is a land-based military unit.", "stance-toward": "stance-toward <player-number> <diplomatic-stance>\nThis fact checks the computer player\u2019s stance toward a given player.The fact allows \u201cany\u201d/\u201devery\u201d wildcard parameters for the <player-number>.", "starting-age": "starting-age <rel-op> <age>\nThis fact checks the game's starting age. In addition to the regular age parameters, post-imperial-age can be used.", "starting-resources": "starting-resources <rel-op> <starting-resources>\nThis fact checks starting resources (low, medium, or high).", "stone-amount": "stone-amount  <rel-op>  <value>\nThis fact checks the computer player\u2019s stone amount.", "strategic-number": "strategic-number  <strategic-number>  <rel-op>  <value>\nThis fact checks a strategic number\u2019s value.", "taunt-detected": "taunt-detected <player-number> <taunt-id>\nThis fact detects a given taunt. The check can be performed any number of times until the taunt is explicitly acknowledged. The fact allows \u201cany\u201d/\u201devery\u201d wildcard parameters for the <player-number>.The following example detects a request for food by an enemy player, computer or human:(defrule   (taunt-detected any-enemy 3)   =>   (acknowledge-taunt this-any-enemy 3)   (chat-to-player this-any-enemy \"No food for you\"))", "timer-triggered": "timer-triggered <timer-id>\nThis fact checks whether a given timer has triggered. For disabled timers this fact is always false. The check can be performed any number of times until the timer is explicitly disabled.", "town-under-attack": "town-under-attack\nThis fact is set to true when a computer player\u2019s town is under attack.", "unit-available": "unit-available <unit>\nThe fact checks that the unit is available to the computer player's civ, and that the tech tree prerequisites for training the unit are met.The fact does not check whether the unit training can start. This depends on resource availability, housing headroom, and whether the building needed for training is currently used for research/training of another unit.The fact allows the use of unit line wildcard parameters for the <unit>.", "unit-count": "unit-count  <rel-op>  <value>\nThis fact checks the computer player's unit count. Only trained units are included.", "unit-count-total": "unit-count-total  <rel-op>  <value>\nThis fact checks the computer player's total unit count. The total includes trained and queued units.", "unit-type-count": "unit-type-count  <unit> <rel-op>  <value>\nThis fact checks the computer player's unit count. Only trained units of the given type are included.The fact allows the use of unit line wildcard parameters for the <unit>.", "unit-type-count-total": "unit-type-count-total  <unit> <rel-op>  <value>\nThis fact checks the computer player's total unit count. The total includes trained and queued units of the given type.The fact allows the use of unit line wildcard parameters for the <unit>.", "victory-condition": "victory-condition  <victory-condition>\n                                                      This fact checks the game victory condition.", "wall-completed-percentage": "wall-completed-percentage  <perimeter> <rel-op>  <value>\nThis fact checks the completion percentage for a given perimeter wall. Trees and other destructible natural barriers are included and count as completed.", "wall-invisible-percentage": "wall-invisible-percentage  <perimeter> <rel-op>  <value>\nThis fact checks what percentage of the potential wall placement is covered with fog. Example:(defrule(wall-completed-percentage 1 < 100)  ; Not all of it finished(wall-invisible-percentage 1 == 0); And we can see it all      =>(chat-local \"Found hole in the wall.\"))Notice that if the invisible percentage is not equal to 0 we do not know if there is a hole or not. This is because the hidden tile(s) might have a tree(s).", "warboat-count": "warboat-count  <rel-op>  <value>\nThe fact checks the computer player\u2019s warboat count. A warboat is a boat capable of attacking.", "wood-amount": "wood-amount  <rel-op>  <value>This fact checks the computer player\u2019s wood amount.\n"}